// <auto-generated />
using System;
using Core.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250708193831_Task-16")]
    partial class Task16
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Server.Database.Email.EmailSendingQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("SendAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("WithError")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EmailSendingQueue");
                });

            modelBuilder.Entity("Core.Server.Database.Files.FileData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Core.Server.Database.GamePacks.GamePack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("UserCreatedId");

                    b.ToTable("GamePacks");
                });

            modelBuilder.Entity("Core.Server.Database.Lobbies.Lobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<int[]>("Conditions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GamePackId")
                        .HasColumnType("bigint");

                    b.Property<long>("HostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<int>("RatingChange")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GamePackId");

                    b.HasIndex("HostId");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("Core.Server.Database.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ConfirmedByModerator")
                        .HasColumnType("boolean");

                    b.Property<bool>("ConfirmedEmail")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JoinedLobbyId")
                        .HasColumnType("uuid");

                    b.Property<string>("JwtToken")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("JoinedLobbyId");

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Server.Database.GamePacks.GamePack", b =>
                {
                    b.HasOne("Core.Server.Database.Files.FileData", "File")
                        .WithOne("GamePack")
                        .HasForeignKey("Core.Server.Database.GamePacks.GamePack", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Server.Database.Users.User", "UserCreated")
                        .WithMany("GamePacks")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("Core.Server.Database.Lobbies.Lobby", b =>
                {
                    b.HasOne("Core.Server.Database.GamePacks.GamePack", "GamePack")
                        .WithMany("Lobbies")
                        .HasForeignKey("GamePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Server.Database.Users.User", "Host")
                        .WithMany("HostedLobby")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePack");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Core.Server.Database.Users.User", b =>
                {
                    b.HasOne("Core.Server.Database.Files.FileData", "Image")
                        .WithOne("User")
                        .HasForeignKey("Core.Server.Database.Users.User", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Server.Database.Lobbies.Lobby", "JoinedLobby")
                        .WithMany("Users")
                        .HasForeignKey("JoinedLobbyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Image");

                    b.Navigation("JoinedLobby");
                });

            modelBuilder.Entity("Core.Server.Database.Files.FileData", b =>
                {
                    b.Navigation("GamePack")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Server.Database.GamePacks.GamePack", b =>
                {
                    b.Navigation("Lobbies");
                });

            modelBuilder.Entity("Core.Server.Database.Lobbies.Lobby", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Server.Database.Users.User", b =>
                {
                    b.Navigation("GamePacks");

                    b.Navigation("HostedLobby");
                });
#pragma warning restore 612, 618
        }
    }
}
