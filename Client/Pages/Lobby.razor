@page "/lobby/{LobbyId}"
@using System.Net
@inject NavigationManager Navigation

<div class="lobby-container">
    <h3 style="color: #EF0027;">@(CurrentLobby?.Name ?? "Загрузка...")</h3>

    @if (CurrentLobby == null)
    {
        <p>Загрузка данных лобби...</p>
    }
    else
    {
        <div class="teams-container">
            <!-- Первая команда -->
            <div class="team-section">
                <div class="team-players">
                    @foreach (var player in CurrentLobby.TeamA.Players)
                    {
                        <div class="player-avatar">
                            <img src="@player.AvatarUrl" alt="@player.Name" />
                            <span>@player.Name</span>
                        </div>
                    }
                </div>

                <div class="battlefield">
                    <div class="grid-header">
                        @for (var c = 'A'; c <= 'H'; c++)
                        {
                            <div class="grid-coord">@c</div>
                        }
                    </div>
                    @for (var y = 1; y <= 8; y++)
                    {
                        <div class="grid-row">
                            <div class="grid-coord">@y</div>
                            @for (var x = 1; x <= 8; x++)
                            {
                                <div class="grid-cell" 
                                     @onclick="() => HandleCellClick(x, y, 1)"
                                     style="background-color: @GetCellColor(x, y, 1);">
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Разделительная линия -->
            <div class="team-divider"></div>

            <!-- Вторая команда -->
            <div class="team-section">
                <div class="battlefield">
                    <div class="grid-header">
                        @for (char c = 'A'; c <= 'H'; c++)
                        {
                            <div class="grid-coord">@c</div>
                        }
                    </div>
                    @for (int y = 1; y <= 8; y++)
                    {
                        <div class="grid-row">
                            <div class="grid-coord">@y</div>
                            @for (int x = 1; x <= 8; x++)
                            {
                                <div class="grid-cell" 
                                     @onclick="() => HandleCellClick(x, y, 2)"
                                     style="background-color: @GetCellColor(x, y, 2);">
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="team-players">
                    @foreach (var player in CurrentLobby.TeamB.Players)
                    {
                        <div class="player-avatar">
                            <img src="@player.AvatarUrl" alt="@player.Name" />
                            <span>@player.Name</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Скамейка запасных -->
        <div class="bench-container">
            <h4>Запасные игроки</h4>
            <div class="bench-players">
                @foreach (var player in CurrentLobby.BenchPlayers)
                {
                    <div class="player-avatar bench">
                        <img src="@player.AvatarUrl" alt="@player.Name" />
                        <span>@player.Name</span>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public required Guid LobbyId { get; set; }

    private LobbyModel CurrentLobby { get; set; }
    private bool isLoading = true;

    private string GetCellColor(int x, int y, int team)
    {
        // Ваша логика определения цвета клетки
        return (x + y) % 2 == 0 ? "#FFFFFF" : "#F0F0F0";
    }

    private void HandleCellClick(int x, int y, int team)
    {
        // Обработка клика по клетке
    }

    // Модели данных
    public class LobbyModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public Team TeamA { get; set; }
        public Team TeamB { get; set; }
        public List<Player> BenchPlayers { get; set; }
    }

    public class Team
    {
        public List<Player> Players { get; set; }
    }

    public class Player
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string AvatarUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (LobbyId == Guid.Empty)
            {
                Navigation.NavigateTo("/error/404");

                return;
            }
            
            var response = await Http.GetAsync($"/api/v1/lobbies/{LobbyId}");
            if (response == null) throw new Exception();
            
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/error/401");

                return;
            }

            if (response.StatusCode == HttpStatusCode.Forbidden)
            {
                Navigation.NavigateTo("/error/403");

                return;
            }
            
            response.EnsureSuccessStatusCode();
        }
        catch
        {
            Navigation.NavigateTo("/error");
        }
    }
}