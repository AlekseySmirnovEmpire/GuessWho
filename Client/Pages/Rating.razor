@page "/rating"
@using System.Net
@using System.Text.Json
@using Core.Models.Users

<PageTitle>Рейтинг</PageTitle>

<div class="rating-container">
    <h3 class="rating-title">Рейтинг игроков</h3>
    @if (_allUsers.Any())
    {
        <div class="rating-table-container">
            <table class="rating-table">
                <thead>
                <tr>
                    <th>#</th>
                    <th>Никнейм</th>
                    <th>Рейтинг</th>
                    <th>Серия</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (user, index) in _displayedUsers.Select((u, i) => (u, i)))
                {
                    <tr class="@(user.ActiveUser ? "current-user" : string.Empty)">
                        <td>@((_currentPage - 1) * PageSize + index + 1)</td>
                        <td>@user.NickName</td>
                        <td>@user.Rating</td>
                        <td>
                            <span class="streak-badge @RatingService.GetRatingMark(user.Rating)">
                                @RatingService.GetRatingName(user.Rating)
                            </span>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        if (_allUsers.Count > 10)
        {
            <div class="pagination">
                <button class="pagination-btn" @onclick="PrevPage" disabled="@(_currentPage == 1)">
                    &lt;
                </button>
                @for (var idx = 1; idx <= TotalPages; idx++)
                {
                    var i = idx;
                    <button class="pagination-btn @(idx == _currentPage ? "active" : "")"
                            @onclick="() => ChangePage(i)">
                        @idx
                    </button>
                }
                <button class="pagination-btn" @onclick="NextPage" disabled="@(_currentPage == TotalPages)">
                    &gt;
                </button>
            </div>
        }
    }
</div>

@code {
    private List<UserModel> _allUsers = [];
    private List<UserModel> _displayedUsers = [];

    // Настройки пагинации
    private const int PageSize = 10;
    private int _currentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)_allUsers.Count / PageSize);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var response = await Http.GetAsync("/api/v1/users/rating");
            if (response?.StatusCode == HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/error/401");
            
                return;
            }
            
            if (response?.IsSuccessStatusCode != true) return;

            _allUsers = await JsonSerializer.DeserializeAsync<List<UserModel>>(await response.Content.ReadAsStreamAsync()) ?? [];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        UpdateDisplayedUsers();
    }

    private void UpdateDisplayedUsers()
    {
        _displayedUsers = _allUsers
            .Skip((_currentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (_currentPage == page) return; // Добавлена проверка

        _currentPage = page;
        UpdateDisplayedUsers();
    }

    private void PrevPage()
    {
        if (_currentPage <= 1) return;

        _currentPage--;
        UpdateDisplayedUsers();
    }

    private void NextPage()
    {
        if (_currentPage >= TotalPages) return;

        _currentPage++;
        UpdateDisplayedUsers();
    }

}