@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using Core.Models.Users
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Восстановление пароля</PageTitle>

<div class="password-reset-container">
    <div class="password-reset-card">
        <h2 class="password-reset-title">Восстановление пароля</h2>
        <hr class="divider"/>
        
        @if (_success)
        {
            <div>
                Пароль успешно восстановлен.
            </div>
            <button class="submit-btn" @onclick="ToMain">На главную</button>
        }
        else
        {
            <EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label>Новый пароль</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control"/>
                    <ValidationMessage For="@(() => _model.Password)"/>
                </div>

                <div class="form-group">
                    <label>Повторите пароль</label>
                    <InputText type="password" @bind-Value="_model.ConfirmPassword" class="form-control"/>
                    <ValidationMessage For="@(() => _model.ConfirmPassword)"/>
                    @if (!string.IsNullOrEmpty(_model.ConfirmPassword) && _model.Password != _model.ConfirmPassword)
                    {
                        <div class="validation-message">Пароли не совпадают</div>
                    }
                </div>

                @if (_progress)
                {
                    <div class="loading-spinner"></div>
                }
                else if (_wrong)
                {
                    <div style="color: #EF0027">Восстановление невозможно</div>
                }
                else
                {
                    <button type="submit" class="submit-btn">Подтвердить</button>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    private string? _token;
    private bool _progress;
    private bool _wrong;
    private bool _success;
    private readonly PasswordModel _model = new();

    private void ToMain() => Navigation.NavigateTo("/");

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token) ||
            string.IsNullOrEmpty(token.FirstOrDefault()))
        {
            Navigation.NavigateTo("/error/404");
            return;
        }

        _token = token;
        _wrong = false;
        _progress = false;
        _success = false;
    }

    private async Task HandleSubmit()
    {
        if (_model.Password != _model.ConfirmPassword || _progress) return;

        try
        {
            _progress = true;
            _wrong = false;
            
            // Отправка запроса на сброс пароля
            using var response = await Http.PostAsync(
                "/api/v1/password/reset",
                new ResetPasswordModel
                {
                    Password = _model.Password,
                    Token = _token!
                });

            if (response.IsSuccessStatusCode) _success = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _wrong = true;
            _success = false;
        }
        finally
        {
            _progress = false;
            StateHasChanged();
        }
    }

    private class PasswordModel
    {
        [Required(ErrorMessage = "Пароль обязателен")]
        [MinLength(6, ErrorMessage = "Минимум 6 символов")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Подтвердите пароль")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}