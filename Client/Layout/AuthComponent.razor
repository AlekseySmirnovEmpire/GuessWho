@using System.Text.Json
@using Core.Extensions
@using Core.Models.Users

<div class="auth-container" @onclick="ToggleMenu">
    @if (_loadingInProgress)
    {
        <div class="loading-spinner"></div>
    }
    else if (_user != null)
    {
        <div class="auth-avatar @_statusClass" style="@AvatarUrl()"></div>
        <div class="auth-info">
            <div class="auth-name">@_user.NickName</div>
            <div class="auth-rating @_statusClass" @onmouseover="ShowTooltip" @onmouseout="HideTooltip">
                @_user.Role.GetDescription()
                @if (_showTooltip)
                {
                    <div class="auth-tooltip">Рейтинг: @_user.Rating</div>
                }
            </div>
        </div>
        <div class="auth-menu @(_menuOpen ? "show" : string.Empty)" @ref="_menuRef" @onclick:stopPropagation>
            <div class="menu-item" @onclick="ChangeAvatar">
                <span class="menu-icon"><i class="fas fa-user-edit"></i></span>
                Изменить аватар
            </div>
            <div class="menu-divider"></div>
            <div class="menu-item" @onclick="OpenSettings">
                <span class="menu-icon"><i class="fas fa-cog"></i></span>
                Настройки
            </div>
            <div class="menu-divider"></div>
            <div class="menu-item" @onclick="Logout">
                <span class="menu-icon"><i class="fas fa-sign-out-alt"></i></span>
                Выход
            </div>
        </div>
    }
    else
    {
        <a class="btn" @onclick:preventDefault @onclick="ToggleSignIn">Вход</a>
        <a class="btn" @onclick:preventDefault @onclick="ToggleSignUp">Регистрация</a>
    }
</div>

@code
{
    private bool _showTooltip;
    private bool _loadingInProgress = true;
    private UserModel? _user;
    private string _statusClass = string.Empty;
    private bool _previousValue;
    private bool _isInitialized;
    private bool _menuOpen;
    private ElementReference _menuRef;
    private string _avatarBackground = string.Empty;

    private void ShowTooltip() => _showTooltip = true;
    private void HideTooltip() => _showTooltip = false;

    private string AvatarUrl() => !string.IsNullOrEmpty(_avatarBackground)
        ? $"background-image: {_avatarBackground}; background-size: cover; border: none; object-fit: cover;"
        : "background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 4a4 4 0 0 1 4 4 4 4 0 0 1-4 4 4 4 0 0 1-4-4 4 4 0 0 1 4-4m0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4z'/%3E%3C/svg%3E\")";

    private async Task ToggleSignIn()
    {
        SignInOpen = !SignInOpen;
        await SignInOpenChanged.InvokeAsync(SignInOpen);
    }

    private async Task ToggleSignUp()
    {
        SignUpOpen = !SignUpOpen;
        await SignUpOpenChanged.InvokeAsync(SignUpOpen);
    }

    [Parameter] public bool SignInOpen { get; set; }

    [Parameter] public EventCallback<bool> SignInOpenChanged { get; set; }

    [Parameter] public bool SignUpOpen { get; set; }

    [Parameter] public EventCallback<bool> SignUpOpenChanged { get; set; }

    [Parameter] public UserModel? User { get; set; }

    [Parameter] public EventCallback<UserModel> UserChanged { get; set; }

    [Parameter] public bool ReloadUser { get; set; }
    
    [Parameter] public bool ReloadAvatar { get; set; }

    [Parameter] public bool ChangeAvatarOpen { get; set; }

    [Parameter] public EventCallback<bool> ChangeAvatarOpenChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _user = User;
        if (_user != null)
        {
            _loadingInProgress = false;
            _isInitialized = true;
            _previousValue = _isInitialized;
            if (_user.ImageId.HasValue) _avatarBackground = $"url(\"{Http.GetBaseAddress()}/api/v1/images/{_user.ImageId}\")";

            StateHasChanged();

            return;
        }

        try
        {
            var response = await Http.GetAsync("/api/v1/users", false);
            if (response == null)
            {
                _loadingInProgress = false;

                return;
            }

            _user = await JsonSerializer.DeserializeAsync<UserModel>(await response.Content.ReadAsStreamAsync());
            if (_user == null) return;

            if (_user.ImageId.HasValue) _avatarBackground = $"url(\"{Http.GetBaseAddress()}/api/v1/images/{_user.ImageId}\")";

            await UserChanged.InvokeAsync(_user);

            _statusClass = RatingService.GetRatingMark(_user.Rating);
        }
        finally
        {
            _loadingInProgress = false;
            _isInitialized = true;
            _previousValue = _isInitialized;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ReloadUser != _previousValue && _isInitialized)
        {
            _previousValue = ReloadUser;
            await OnValueChangedAsync();
        }

        if (ReloadAvatar && _user?.ImageId != null)
        {
            _avatarBackground = $"url(\"{Http.GetBaseAddress()}/api/v1/images/{_user.ImageId}\")";
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_menuOpen)
        {
            await Js.InvokeVoidAsync("blazorHelpers.addMenuCloseListener",
                DotNetObjectReference.Create(this),
                _menuRef);
        }
    }

    private async Task OnValueChangedAsync()
    {
        if (ReloadUser == false) return;

        try
        {
            var response = await Http.GetAsync("/api/v1/users", false);
            if (response == null)
            {
                _loadingInProgress = false;

                return;
            }

            _user = await JsonSerializer.DeserializeAsync<UserModel>(await response.Content.ReadAsStreamAsync());
            if (_user == null) return;
            
            if (_user.ImageId.HasValue) _avatarBackground = $"url(\"{Http.GetBaseAddress()}/api/v1/images/{_user.ImageId}\")";

            await UserChanged.InvokeAsync(_user);

            _statusClass = RatingService.GetRatingMark(_user.Rating);
        }
        finally
        {
            _loadingInProgress = false;
            _isInitialized = true;
            _previousValue = _isInitialized;
            StateHasChanged();
        }
    }

    private void ToggleMenu()
    {
        if (_user == null) return;

        _menuOpen = !_menuOpen;
        StateHasChanged();
    }

    private async Task ChangeAvatar()
    {
        _menuOpen = false;
        await ChangeAvatarOpenChanged.InvokeAsync(true);
        StateHasChanged();
    }

    private void OpenSettings()
    {
        _menuOpen = false;
        StateHasChanged();
        // Ваша логика открытия настроек
    }

    private async Task Logout()
    {
        _menuOpen = false;
        StateHasChanged();

        try
        {
            using var response = await Http.PostAsync<string>("/api/v1/auth/logout", null);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            _user = null;
            await UserChanged.InvokeAsync(_user);
            await LocalStorage.SetItemAsync("Guess_Who", new object());
            StateHasChanged();
            Navigation.NavigateTo("/");
        }
    }

    [JSInvokable]
    public void CloseMenu()
    {
        _menuOpen = false;
        StateHasChanged();
    }
}
