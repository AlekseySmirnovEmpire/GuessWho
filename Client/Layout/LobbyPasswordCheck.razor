@using System.ComponentModel.DataAnnotations
<div class="modal-backdrop @(Open ? "show" : "hide")"
     @onclick="Close">
</div>
<div class="modal @(Open ? "show" : "hide")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header no-select">
                <h3>Вход в лобби</h3>
                <span class="close-btn" @onclick="Close">×</span>
            </div>
            <div class="modal-body">
                @if (_progress)
                {
                    <div class="loading-spinner"></div>
                }
                else
                {
                    <EditForm Model="@this" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label class="no-select">Введите пароль:</label>
                            <InputText type="password" @bind-Value="_lobbyModel.Password" class="form-control" maxlength="16"/>
                            <ValidationMessage For="@(() => _lobbyModel.Password)"/>
                        </div>
                        @if (_errorsInProgress)
                        {
                            <div style="color: #EF0027">Пароль неверный</div>
                        }
                        <button class="btn btn-primary mt-3" @onclick="HandleSubmit">Войти</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool _progress;
    private bool _errorsInProgress;
    private LobbyPasswordCheckModel _lobbyModel = new();
    private EditContext? _editContext;
    
    [Parameter] public bool Open { get; set; }

    [Parameter] public EventCallback<bool> OpenChanged { get; set; }
    
    [Parameter] public Guid LobbyId { get; set; }

    [Parameter] public EventCallback<Guid> LobbyIdChanged { get; set; }

    protected override void OnInitialized()
    {
        _progress = false;
        _editContext = new EditContext(_lobbyModel);
    }

    private async Task HandleSubmit()
    {
        _progress = true;
        _errorsInProgress = false;
        if (_editContext == null || !_editContext.Validate())
        {
            // Модель не валидна, показываем ошибки
            return;
        }

        try
        {
            var response = await Http.PostAsync($"/api/v1/lobbies/{LobbyId}/password", _lobbyModel);
            response.EnsureSuccessStatusCode();
            await Close();

            Navigation.NavigateTo($"/lobbies/{LobbyId}");
        }
        catch
        {
            _errorsInProgress = true;
        }
        finally
        {
            _progress = false;
        }
    }
    
    private async Task Close()
    {
        if (_progress) return;

        _errorsInProgress = false;
        _lobbyModel = new LobbyPasswordCheckModel();
        _editContext = new EditContext(_lobbyModel);

        await OpenChanged.InvokeAsync(false);
    }
    
    private class LobbyPasswordCheckModel
    {
        [Required(ErrorMessage = "Введите пароль!"), Length(1, 16, ErrorMessage = "Введите пароль")]
        public string Password { get; set; } = string.Empty;
    }
}