@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Core.Models.GamePacks
@using Core.Models.Lobbies
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
<div class="modal-backdrop @(Open ? "show" : "hide")"
     @onclick="Close">
</div>

<div class="modal @(Open ? "show" : "hide")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header no-select">
                <h3>Создание лобби</h3>
                <span class="close-btn" @onclick="Close">×</span>
            </div>
            <div class="modal-body">
                @if (_progress)
                {
                    <div class="loading-spinner"></div>
                }
                else
                {
                    <EditForm Model="@this" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label class="no-select">Название:</label>
                            <InputText @bind-Value="_lobbyModel.DisplayName" maxlength="255" minlength="4"
                                       class="form-control"/>
                            <ValidationMessage For="@(() => _lobbyModel.DisplayName)"/>
                        </div>

                        <div class="form-group">
                            <label class="no-select">Количество игроков:</label>
                            <InputNumber Min="2" Max="10" Step="2" @bind-Value="_lobbyModel.PlayersCount"
                                         class="form-control"/>
                            <ValidationMessage For="@(() => _lobbyModel.PlayersCount)"/>
                        </div>

                        <div class="form-group">
                            <label class="no-select">Изменение рейтинга:</label>
                            <InputNumber Min="0" Max="100" Step="10" @bind-Value="_lobbyModel.RatingChange"
                                         class="form-control"/>
                            <ValidationMessage For="@(() => _lobbyModel.RatingChange)"/>
                        </div>

                        <div class="form-group">
                            <label class="no-select">Пароль:</label>
                            <InputText type="password" @bind-Value="_lobbyModel.Password" class="form-control" maxlength="16"
                                       minlength="6"/>
                            <ValidationMessage For="@(() => _lobbyModel.Password)"/>
                        </div>
                        <div class="form-group">
                            <label class="no-select">Выберите пак:</label>
                            <InputSelect class="full-width-select" @bind-Value="_lobbyModel.PackId">
                                <option value="0" selected>Нет</option>
                                @foreach (var pack in _packs.Where(p => p.IsActive))
                                {
                                    <option value="@pack.Id">@pack.DisplayName</option>
                                }
                            </InputSelect>
                        </div>
                        @if (!string.IsNullOrEmpty(_errorsInProgress))
                        {
                            <div style="color: #EF0027">@_errorsInProgress</div>
                        }
                        <button class="btn btn-primary mt-3" @onclick="HandleSubmit">Создать</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? _hubConnection;
    private CreateLobbyModel _lobbyModel = new();
    private EditContext? _editContext;
    private bool _progress;
    private string _errorsInProgress = string.Empty;
    private List<GamePackDtoModel> _packs = [];

    [Parameter] public bool Open { get; set; }

    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _progress = true;
            _errorsInProgress = string.Empty;
            _editContext = new EditContext(_lobbyModel);
            StateHasChanged();

            using var response = await Http.GetAsync("/api/v1/gamepack/all?active=true");
            if (response?.IsSuccessStatusCode != true) throw new Exception("невозможно создать лобби");

            _packs = (await JsonSerializer.DeserializeAsync<List<GamePackDtoModel>>(await response.Content.ReadAsStreamAsync()))!;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Configuration["ApiUrl"]}/gamepackhub", options =>
                {
                    options.SkipNegotiation = false;
                    options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                })
                .WithAutomaticReconnect([
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(1),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                ])
                .ConfigureLogging(logging => { logging.SetMinimumLevel(LogLevel.Information); })
                .Build();

            _hubConnection.On<GamePackDtoModel>("GamePackCreated", pack =>
            {
                _packs.Add(pack);
                InvokeAsync(StateHasChanged);
            });
            _hubConnection.On<long>("GamePackClosed", packId =>
            {
                _packs.ForEach(p =>
                {
                    if (p.Id == packId) p.IsActive = false;
                });

                InvokeAsync(StateHasChanged);
            });
            _hubConnection.On<long>("GamePackOpened", packId =>
            {
                _packs.ForEach(p =>
                {
                    if (p.Id == packId) p.IsActive = true;
                });

                InvokeAsync(StateHasChanged);
            });
            _hubConnection.On<long>("GamePackDeleted", packId =>
            {
                var pack = _packs.FirstOrDefault(l => l.Id == packId);
                if (pack == null) return;

                _packs.Remove(pack);
                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
        }
        catch
        {
            await OpenChanged.InvokeAsync(false);
        }
        finally
        {
            _progress = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (_editContext == null || !_editContext.Validate())
            {
                // Модель не валидна, показываем ошибки
                return;
            }

            _progress = true;
            _errorsInProgress = string.Empty;
            StateHasChanged();

            using var response = await Http.PutAsync(
                "/api/v1/lobbies",
                new LobbyDtoModel
                {
                    DisplayName = _lobbyModel.DisplayName,
                    Password = _lobbyModel.Password,
                    Conditions = _lobbyModel.RatingChange > 0 ? [LobbyCondition.Rating] : [],
                    PlayersCount = (ushort)_lobbyModel.PlayersCount,
                    RatingChange = (ushort)_lobbyModel.RatingChange,
                    GamePackId = _lobbyModel.PackId
                });
            response.EnsureSuccessStatusCode();
            _lobbyModel = new CreateLobbyModel();
            _editContext = new EditContext(_lobbyModel);

            await OpenChanged.InvokeAsync(false);
        }
        catch
        {
            _errorsInProgress = "не удалось создать лобби";
        }
        finally
        {
            _progress = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        if (_progress) return;

        _errorsInProgress = string.Empty;

        await OpenChanged.InvokeAsync(false);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private class CreateLobbyModel
    {
        [Range(0, 100, ErrorMessage = "Рейтинг должен быть от 0 до 100")]
        public int RatingChange { get; set; }

        [Range(2, 10, ErrorMessage = "Число игроков должно быть от 2 до 10")]
        public int PlayersCount { get; set; }

        [MinLength(6, ErrorMessage = "Пароль должен быть более 6 символов"),
         MaxLength(16, ErrorMessage = "Пароль должен быть не более 16 символов")]
        public string Password { get; set; } = string.Empty;

        [MinLength(4, ErrorMessage = "Название должно быть более 4 символов"),
         MaxLength(255, ErrorMessage = "Название должно быть не более 255 символов")]
        public string DisplayName { get; set; } = string.Empty;

        [Range(1, long.MaxValue, ErrorMessage = "Необходимо выбрать пак")]
        public long PackId { get; set; }
    }

}