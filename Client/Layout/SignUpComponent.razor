@using System.Net
@using Core.Models.Auth
@implements IDisposable

<div class="modal-backdrop @(!SignInOpen && SignUpOpen ? "show" : "hide")"
     @onclick="Close">
</div>

<div class="modal @(!SignInOpen && SignUpOpen ? "show" : "hide")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header no-select">
                <h3>Регистрация</h3>
                <span class="close-btn" @onclick="Close">×</span>
            </div>
            <div class="modal-body">
                @if (_signUpProceed)
                {
                    <div class="no-select" style="color: black">
                        Регистрация прошла успешно. Для её полного завершения и активации аккаунта вам необходимо 
                        дождаться письма на указанный email (<span style="text-decoration: underline; color: #EF0027">@_email</span>) 
                        с дальнейшими действиями.
                    </div>
                }
                else
                {
                    <EditForm Model="@this" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label class="no-select">Никнейм:</label>
                            <InputText @bind-Value="_username" maxlength="255"
                                       class="@GetUsernameClass()"/>
                            @if (_username.Length > 255)
                            {
                                <div class="invalid-feedback">Никнейм должен быть от 4 до 255 символов</div>
                            }
                        </div>

                        <div class="form-group">
                            <label class="no-select">Email:</label>
                            <InputText type="email" @bind-Value="_email"
                                       class="@GetEmailClass()"/>
                            <ValidationMessage For="@(() => _email)"/>
                            @if (!EmailValid && !string.IsNullOrEmpty(_email))
                            {
                                <div class="invalid-feedback">Введите корректный email</div>
                            }
                        </div>

                        <div class="form-group">
                            <label class="no-select">Пароль (6-16 символов):</label>
                            <InputText type="password" @bind-Value="_password"
                                       class="@GetPasswordClass()"/>
                            @if (!PasswordValid && !string.IsNullOrEmpty(_password))
                            {
                                <div class="invalid-feedback">Пароль должен быть от 6 до 16 символов</div>
                            }
                        </div>

                        <div class="form-group">
                            <label class="no-select">Повторите пароль:</label>
                            <InputText type="password" @bind-Value="_passwordRepeat"
                                       class="@GetPasswordRepeatClass()"/>
                            @if (!PasswordsMatch && !string.IsNullOrEmpty(_passwordRepeat))
                            {
                                <div class="invalid-feedback">Пароли не совпадают</div>
                            }
                        </div>
                        @if (_progress)
                        {
                            <div class="loading-spinner"></div>
                        }
                        else
                        {
                            <div style="font-weight: bold;">
                                Нажимая кнопку, вы подтверждаете свое согласие на:
                            </div>
                            <div>
                                <ul>
                                    <li>обработку персональных данных в соответствии с <b>Федеральным законом от 27.07.2006 №152-ФЗ</b> "О персональных данных"</li>
                                    <li>соблюдение условий пользовательского соглашения</li>
                                </ul>
                            </div>
                            if (!string.IsNullOrEmpty(_errorsInProgress))
                            {
                                <div style="color: #EF0027">@_errorsInProgress</div>
                            }
                            <button class="btn btn-primary mt-3" @onclick="HandleSubmit">Зарегистрироваться</button>
                        }
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _username = string.Empty;
    private string _passwordRepeat = string.Empty;
    private DotNetObjectReference<SignUpComponent>? _dotNetHelper;
    private bool _signUpProceed;
    private bool _progress;
    private string _errorsInProgress = string.Empty;

    private bool EmailValid => string.IsNullOrEmpty(_email) ||
                               System.Text.RegularExpressions.Regex.IsMatch(
                                   _email,
                                   @"^[^@\s]+@[^@\s]+\.[^@\s]+$");

    private bool PasswordValid => string.IsNullOrEmpty(_password) ||
                                  _password.Length is >= 6 and <= 16;

    private bool PasswordsMatch => string.IsNullOrEmpty(_passwordRepeat) ||
                                   _password == _passwordRepeat;

    private string GetEmailClass() => EmailValid ? "form-control" : "form-control is-invalid";
    private string GetUsernameClass() => _username.Length is >= 4 and <= 255 ? "form-control" : "form-control is-invalid";
    private string GetPasswordClass() => PasswordValid ? "form-control" : "form-control is-invalid";
    private string GetPasswordRepeatClass() => PasswordsMatch ? "form-control" : "form-control is-invalid";

    [Parameter] public bool SignInOpen { get; set; }

    [Parameter] public EventCallback<bool> SignInOpenChanged { get; set; }

    [Parameter] public bool SignUpOpen { get; set; }

    [Parameter] public EventCallback<bool> SignUpOpenChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !SignInOpen && SignUpOpen)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("addBackdropClickHandler", _dotNetHelper);
        }
    }

    [JSInvokable]
    public void HandleBackdropClick()
    {
        Close().Wait();
    }

    private async Task HandleSubmit()
    {
        if (!EmailValid || !PasswordValid || !PasswordsMatch || _username.Length is < 4 or > 255) return;

        _progress = true;

        try
        {
            var response = await Http.PutAsync(
                "/api/v1/auth/signup",
                new SignUpModel
                {
                    Email = _email,
                    NickName = _username,
                    Password = _password
                });
            if (response.StatusCode == HttpStatusCode.Conflict)
            {
                _signUpProceed = false;
                _errorsInProgress = "Данный пользователь уже зарегистрирован";
                
                return;
            }
            
            if (response.IsSuccessStatusCode)
            {
                _signUpProceed = true;
                _errorsInProgress = string.Empty;
                
                return;
            }

            _signUpProceed = false;
            _errorsInProgress = "Произошла ошибка на сервере, попробуйте позже.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
            _errorsInProgress = "Произошла ошибка на сервере, попробуйте позже.";
        }
        finally
        {
            _progress = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        if (_progress) return;
        
        SignUpOpen = false;
        _errorsInProgress = string.Empty;
        _signUpProceed = false;
        await SignUpOpenChanged.InvokeAsync(false);
    }

    public void Dispose()
    {
        _dotNetHelper?.Dispose();

        // Опционально: удалить обработчик при закрытии
        if (!SignInOpen && SignUpOpen)
        {
            Js.InvokeVoidAsync("removeBackdropClickHandler");
        }
    }

}