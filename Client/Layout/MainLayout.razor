@using Core.Models.Users
@inherits LayoutComponentBase
<div class="page">

    @if (_user != null)
    {
        <div class="sidebar">
            <NavMenu User="_user"/>
        </div>
    }
    <SignInComponent @bind-SignInOpen="_signInOpen" @bind-SignUpOpen="_signUpOpen" ReloadUserChanged="@HandleValue"/>
    <SignUpComponent @bind-SignInOpen="_signInOpen" @bind-SignUpOpen="_signUpOpen"/>
    <ChangeAvatarComponent @bind-User="_user" @bind-Open="_changeAvatar" @bind-ReloadAvatar="_reloadAvatar"/>
    <UserSettingsComponent @bind-User="_user" @bind-ReloadUser="_reloadUser" @bind-Open="_settingsOpen"/>

    <div class="main-container">
        <main>
            <div class="top-row px-4">
                <AuthComponent 
                    @bind-SignInOpen="_signInOpen" 
                    @bind-SignUpOpen="_signUpOpen"
                    @bind-User="_user" 
                    ReloadUser="@_reloadUser"
                    ReloadAvatar="_reloadAvatar"
                    @bind-ChangeAvatarOpen="_changeAvatar"
                    @bind-SettingsOpen="_settingsOpen"/>
            </div>

            <article class="content px-4">
                @Body
            </article>
            <footer class="footer">
                <div class="footer-bottom">
                    <p>&copy; @DateTime.Now.Year RusEmpire. Все права защищены.</p>
                </div>
            </footer>
        </main>
    </div>
</div>

@code
{
    private bool _signInOpen;
    private bool _signUpOpen;
    private bool _changeAvatar;
    private bool _settingsOpen;
    private UserModel? _user;
    private bool _reloadUser;
    private bool _reloadAvatar;

    private async Task HandleValue(bool newValue)
    {
        _reloadUser = newValue;
        await InvokeAsync(StateHasChanged);
    }
}
