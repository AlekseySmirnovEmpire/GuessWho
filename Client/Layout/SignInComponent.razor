@using System.Net
@using System.Text.Json
@using Client.Services
@using Core.Models.Auth
@implements IDisposable
@inject IJSRuntime Js
@inject CustomHttpClient Http
@inject LocalStorageService LocalStorage

<style>
    /* Стили только для чекбокса "Запомнить меня" */
    .form-group:has(> label.no-select:has(+ input)) {
        /* Стили контейнера */
    }

    /* Кастомный чекбокс */
    .form-group:has(input[type="checkbox"]) .form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        width: 20px;
        height: 25px;
        border: 2px solid #ddd;
        border-radius: 3px;
        outline: none;
        cursor: pointer;
        position: relative;
        vertical-align: middle;
        transition: all 0.2s ease;
        opacity: 1;
    }

    /* Убираем синюю рамку при фокусе */
    .form-group:has(input[type="checkbox"]) .form-control:focus {
        box-shadow: none !important;
        outline: none !important;
    }

    /* Стиль при наведении */
    .form-group:has(input[type="checkbox"]) .form-control:hover {
        border-color: #EF0027;
        background-color: rgba(239, 0, 39, 0.1);
    }

    /* Стиль при активации */
    .form-group:has(input[type="checkbox"]) .form-control:checked {
        background-color: #EF0027;
        border-color: #EF0027;
    }

    /* Белая галочка (псевдоэлемент) */
    .form-group:has(input[type="checkbox"]) .form-control:checked::after {
        content: "";
        position: absolute;
        left: 8px;
        top: 1px;
        width: 8px;
        height: 15px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    /* Скрытие нативного чекбокса */
    .form-group input[type="checkbox"] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
    }
</style>

<div class="modal-backdrop @(SignInOpen && !SignUpOpen ? "show" : "hide")"
     @onclick="Close">
</div>

<div class="modal @(SignInOpen && !SignUpOpen ? "show" : "hide")">
    <div class="modal-dialog">
        <div class="modal-content">
            @if (_resetPassword)
            {
                <div class="modal-header no-select">
                    <span class="close-btn" @onclick="ToggleRefreshPassword">
                        <i class="fa fas fa-solid fa-arrow-left"></i>
                    </span>
                    <h5>Восстановление пароля</h5>
                </div>
                <div class="modal-body">
                    @if (_resetPasswordSuccess)
                    {
                        <div>На указаный email (<span style="color: #EF0027; text-decoration: underline">@_emailReset</span>) 
                            отправлено письмо с дальнейшими действиями</div>
                    }
                    else
                    {
                        <EditForm Model="@this" OnValidSubmit="@HandleResetSubmit">
                            <DataAnnotationsValidator/>
                            <div class="form-group">
                                <label class="no-select">Email:</label>
                                <InputText type="email" @bind-Value="_emailReset" class="@GetEmailResetClass()"/>
                                <ValidationMessage For="@(() => _emailReset)"/>
                                @if (!EmailValid && !string.IsNullOrEmpty(_emailReset))
                                {
                                    <div class="invalid-feedback">Введите корректный email</div>
                                }
                            </div>
                            @if (_resetServerError)
                            {
                                <div style="color: #EF0027">Ошибка на стороне сервера, повторите попытку позже</div>
                            }
                            else if (_progressReset)
                            {
                                <div class="loading-spinner"></div>
                            }
                            else
                            {
                                if (_wrongDataReset)
                                {
                                    <div style="color: #EF0027">Данный email не зарегистрирован</div>
                                }

                                <button type="submit" class="btn btn-primary mt-3" @onclick="HandleResetSubmit">
                                    Восстановить
                                </button>
                            }
                        </EditForm>
                    }
                </div>
            }
            else
            {
                <div class="modal-header no-select">
                    <h3>Вход</h3>
                    <span class="close-btn" @onclick="Close">×</span>
                </div>
                <div class="modal-body">
                    <EditForm Model="@this" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label class="no-select">Email:</label>
                            <InputText type="email" @bind-Value="_email" class="@GetEmailClass()"/>
                            <ValidationMessage For="@(() => _email)"/>
                            @if (!EmailValid && !string.IsNullOrEmpty(_email))
                            {
                                <div class="invalid-feedback">Введите корректный email</div>
                            }
                        </div>
                        <div class="form-group">
                            <label class="no-select">Пароль:</label>
                            <InputText type="password" @bind-Value="_password" class="@GetPasswordClass()"/>
                            <ValidationMessage For="@(() => _password)"/>
                            @if (!_passwordValid)
                            {
                                <div class="invalid-feedback">Поле должно быть не пустым</div>
                            }
                        </div>
                        <div class="form-group">
                            <label class="no-select">Запомнить меня</label>
                            <InputCheckbox type="checkbox" @bind-Value="_rememberMe" class="form-control"/>
                        </div>
                        @if (_serverError)
                        {
                            <div style="color: #EF0027">Ошибка на стороне сервера, повторите попытку позже</div>
                        }
                        else if (_progress)
                        {
                            <div class="loading-spinner"></div>
                        }
                        else
                        {
                            if (_wrongData)
                            {
                                <div style="color: #EF0027">Введены неверные данные</div>
                            }

                            <button type="submit" class="btn btn-primary mt-3" @onclick="HandleSubmit">Войти</button>
                            <a class="btn btn-primary mt-3" @onclick="ToggleRefreshPassword">Восстановить пароль</a>
                        }
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _rememberMe;
    private bool _passwordValid = true;
    private bool _wrongData;
    private bool _serverError;
    private DotNetObjectReference<SignInComponent>? _dotNetHelper;
    private bool _progress;
    private bool _resetPassword;
    private string _emailReset = string.Empty;
    private bool _resetServerError;
    private bool _progressReset;
    private bool _wrongDataReset;
    private bool _resetPasswordSuccess;

    private bool EmailValid => string.IsNullOrEmpty(_email) ||
                               System.Text.RegularExpressions.Regex.IsMatch(
                                   _email,
                                   @"^[^@\s]+@[^@\s]+\.[^@\s]+$");

    private bool EmailResetValid => string.IsNullOrEmpty(_email) ||
                                    System.Text.RegularExpressions.Regex.IsMatch(
                                        _emailReset,
                                        @"^[^@\s]+@[^@\s]+\.[^@\s]+$");

    private string GetEmailClass() => EmailValid ? "form-control" : "form-control is-invalid";
    private string GetEmailResetClass() => EmailResetValid ? "form-control" : "form-control is-invalid";
    private string GetPasswordClass() => _passwordValid ? "form-control" : "form-control is-invalid";

    [Parameter] public bool SignInOpen { get; set; }

    [Parameter] public EventCallback<bool> SignInOpenChanged { get; set; }

    [Parameter] public bool SignUpOpen { get; set; }

    [Parameter] public EventCallback<bool> SignUpOpenChanged { get; set; }

    [Parameter] public EventCallback<bool> ReloadUserChanged { get; set; }

    private async Task Close()
    {
        if (_progress || _progressReset) return;

        SignInOpen = false;
        _passwordValid = true;
        _serverError = false;
        await SignInOpenChanged.InvokeAsync(false);
        _resetPassword = false;
        _wrongDataReset = false;
        _resetPasswordSuccess = false;
    }

    private void ToggleRefreshPassword()
    {
        if (_progressReset) return;

        _resetPassword = !_resetPassword;
        if (_resetPassword) return;

        _resetServerError = false;
        _emailReset = string.Empty;
        _wrongDataReset = false;
        _resetPasswordSuccess = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SignInOpen && !SignUpOpen)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("addBackdropClickHandler", _dotNetHelper);
        }
    }

    [JSInvokable]
    public void HandleBackdropClick()
    {
        Close().Wait();
    }

    private async Task HandleResetSubmit()
    {
        if (!EmailResetValid) return;

        try
        {
            _progressReset = true;
            _wrongDataReset = false;
            _resetPasswordSuccess = false;
            _resetServerError = false;
            using var response = await Http.PostAsync<string>(
                $"/api/v1/password/email?value={_emailReset}",
                null);
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                _wrongDataReset = true;
                
                return;
            }

            if (response.IsSuccessStatusCode) _resetPasswordSuccess = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

            _resetServerError = true;
        }
        finally
        {
            _progressReset = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(_password))
        {
            _passwordValid = false;

            return;
        }

        if (!EmailValid) return;

        try
        {
            _progress = true;
            _wrongData = false;
            _serverError = false;
            using var response = await Http.PostAsync(
                "/api/v1/auth/login",
                new LoginModel
                {
                    Email = _email,
                    Password = _password,
                    RememberMe = _rememberMe
                });
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                _wrongData = true;

                return;
            }

            if (!response.IsSuccessStatusCode)
            {
                _serverError = true;

                return;
            }

            await LocalStorage.SetItemAsync(
                "Guess_Who",
                await JsonSerializer.DeserializeAsync<TokenModel>(await response.Content.ReadAsStreamAsync()));
            await ReloadUserChanged.InvokeAsync(true);

            await Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

            _serverError = true;
        }
        finally
        {
            _progress = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _dotNetHelper?.Dispose();

        // Опционально: удалить обработчик при закрытии
        if (SignInOpen && !SignUpOpen)
        {
            Js.InvokeVoidAsync("removeBackdropClickHandler");
        }
    }

}